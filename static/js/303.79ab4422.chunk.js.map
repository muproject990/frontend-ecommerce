{"version":3,"file":"static/js/303.79ab4422.chunk.js","mappings":"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","sources":["ui/modal.tsx","ui/passwordForm.tsx","components/customer/profile.tsx"],"sourcesContent":["export default function Modal({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"z-50 w-full h-full bg-[#000000aa] absolute inset-0 flex items-center justify-center\">\n      {children}\n    </div>\n  );\n}\n","import { SetStateAction, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport Spinner from \"./spinner\";\ninterface PasswordForm {\n  currentPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\nexport default function PasswordForm(props: {\n  setIsOpenModal: React.Dispatch<SetStateAction<boolean>>;\n}) {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<PasswordForm>();\n  const UPDATE_PASSWORD = gql`\n    mutation updateProfile(\n      $currentPassword: String!\n      $newPassword: String!\n      $confirmPassword: String!\n    ) {\n      updatePassword(\n        currentPassword: $currentPassword\n        newPassword: $newPassword\n        confirmPassword: $confirmPassword\n      )\n    }\n  `;\n  const [updatePassword, { error, data, loading }] =\n    useMutation(UPDATE_PASSWORD);\n\n  function onFormSubmit(data: PasswordForm) {\n    setShowSpinner(true);\n    updatePassword({\n      variables: { ...data },\n    })\n      .then(() => {})\n      .catch((err) => {})\n      .finally(() => {\n        setShowSpinner(false);\n      });\n  }\n  const [showSpinner, setShowSpinner] = useState(false);\n  return (\n    <div>\n      <form\n        onSubmit={handleSubmit(onFormSubmit)}\n        className=\"flex rounded gap-y-4 bg-white flex-col p-4\"\n      >\n        <h5 className=\"text-gray-700 font-semibold\">Change Password</h5>\n        <div>\n          <input\n            {...register(\"currentPassword\", {\n              required: \"Current password required\",\n            })}\n            className=\"border p-2\"\n            placeholder=\"Current password\"\n          />\n          {errors.currentPassword && (\n            <p className=\"text-xs\">\n              <span className=\"text-red-500\">\n                {errors.currentPassword.message}\n              </span>\n            </p>\n          )}\n        </div>\n        <div>\n          <input\n            {...register(\"newPassword\", {\n              required: \"New password required\",\n            })}\n            className=\"border p-2\"\n            placeholder=\"New password\"\n          />\n          {errors.newPassword && (\n            <p className=\"text-xs\">\n              <span className=\"text-red-500\">{errors.newPassword.message}</span>\n            </p>\n          )}\n        </div>\n        <div>\n          <input\n            {...register(\"confirmPassword\", {\n              required: \"confirm password required\",\n            })}\n            className=\"border p-2\"\n            placeholder=\"Confirm password\"\n          />\n          {errors.confirmPassword && (\n            <p className=\"text-xs\">\n              <span className=\"text-red-500\">\n                {errors.confirmPassword.message}\n              </span>\n            </p>\n          )}\n        </div>\n        <div className=\"flex justify-end gap-x-2\">\n          <button\n            onClick={() => props.setIsOpenModal(false)}\n            type=\"button\"\n            className=\"bg-gray-200 w-[80px] p-2 text-xs\"\n          >\n            Discard\n          </button>\n          <button\n            type=\"submit\"\n            className=\"bg-gray-700 w-[80px] h-[35px] text-white text-xs p-2\"\n          >\n            {showSpinner ? <Spinner /> : \"Change\"}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import { useQuery, gql, useMutation } from \"@apollo/client\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Modal from \"../../ui/modal\";\nimport PasswordForm from \"../../ui/passwordForm\";\nimport Spinner from \"../../ui/spinner\";\nimport Error from \"../error\";\n\ninterface ProfileForm {\n  email: string;\n  firstName: string;\n  lastName: string;\n  address: string;\n  dateOfBirth: string;\n}\n\nexport default function Profile() {\n  const GET_PROFILE = gql`\n    query getProfile {\n      getProfile {\n        id\n        email\n        firstName\n        lastName\n        address\n        dateOfBirth\n      }\n    }\n  `;\n  const UPDATE_PROFILE = gql`\n    mutation updateProfile(\n      $email: String!\n      $lastName: String!\n      $address: String!\n      $firstName: String!\n      $dateOfBirth: String!\n    ) {\n      updateProfile(\n        email: $email\n        lastName: $lastName\n        firstName: $firstName\n        address: $address\n        dateOfBirth: $dateOfBirth\n      )\n    }\n  `;\n  const [updateProfile, { error: uError, loading: uLoading }] =\n    useMutation<ProfileForm>(UPDATE_PROFILE);\n  const { data, error, loading } = useQuery<{\n    getProfile: { id: string } & ProfileForm;\n  }>(GET_PROFILE);\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  } = useForm<ProfileForm>();\n  function onSubmit(data: ProfileForm) {\n    setShowSpinner(true);\n    const { email, firstName, lastName, address, dateOfBirth } = data;\n    updateProfile({\n      variables: {\n        email,\n        firstName,\n        lastName,\n        address,\n        dateOfBirth,\n      },\n    })\n      .then(() => {})\n      .catch((err) => {})\n      .finally(() => {\n        setShowSpinner(false);\n      });\n  }\n  useEffect(() => {\n    if (data?.getProfile) {\n      reset(data.getProfile);\n    }\n  }, [data]);\n  const [isFormDisabled, setIsFormDisabled] = useState(true);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(false);\n  if (error) return <Error />;\n  if (loading) return <div>Loading...</div>;\n  return (\n    <div className=\"items-center flex-col p-4 gap-2 text-sm flex justify-center\">\n      <form onSubmit={handleSubmit(onSubmit)} className=\" flex flex-col gap-2\">\n        <h5 className=\" w-full\">Profile</h5>\n        <fieldset disabled={isFormDisabled}>\n          <div className=\"flex flex-col gap-6\">\n            <div>\n              <input\n                {...register(\"email\", {\n                  required: \"Email is required\",\n                })}\n                className=\"w-full border p-2\"\n                placeholder=\"Email\"\n              />\n              {errors.email && (\n                <p className=\"text-xs absolute\">\n                  <span className=\"text-red-500\">{errors.email.message}</span>\n                </p>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <div className=\"relative\">\n                <input\n                  {...register(\"firstName\", {\n                    required: \"First name is required\",\n                  })}\n                  className=\"p-2 border\"\n                  placeholder=\"First Name\"\n                />\n                {errors.firstName && (\n                  <p className=\"text-xs absolute\">\n                    <span className=\"text-red-500\">\n                      {errors.firstName.message}\n                    </span>\n                  </p>\n                )}\n              </div>\n              <div>\n                <input\n                  {...register(\"lastName\", {\n                    required: \"Last name is required\",\n                  })}\n                  className=\"border p-2\"\n                  placeholder=\"Last Name\"\n                />\n                {errors.lastName && (\n                  <p className=\"text-xs absolute\">\n                    <span className=\"text-red-500\">\n                      {errors.lastName.message}\n                    </span>\n                  </p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex gap-2 \">\n              <div className=\"relative w-full\">\n                <input\n                  {...register(\"address\", {\n                    required: \"Address is required\",\n                  })}\n                  className=\"border p-2 w-full\"\n                  placeholder=\"Address\"\n                />\n                {errors.address && (\n                  <p className=\"text-xs absolute\">\n                    <span className=\"text-red-500\">\n                      {errors.address.message}\n                    </span>\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full relative\">\n                <input\n                  {...register(\"dateOfBirth\", {\n                    required: \"Date Of Birth is required\",\n                  })}\n                  type=\"date\"\n                  className=\"border p-2 w-full\"\n                />\n                {errors.dateOfBirth && (\n                  <p className=\"text-xs absolute\">\n                    <span className=\"text-red-500\">\n                      {errors.dateOfBirth.message}\n                    </span>\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </fieldset>\n        <div className=\"flex flex-col gap-y-2 \">\n          <button\n            onClick={() => setIsOpenModal(true)}\n            type=\"button\"\n            style={{ width: \"max-content\" }}\n            className=\"underline text-xs text-start text-gray-600\"\n          >\n            Change password\n          </button>\n        </div>\n        <div className=\"w-full flex items-center justify-end gap-2\">\n          <button\n            onClick={() => setIsFormDisabled((prev) => !prev)}\n            type=\"button\"\n            className=\"bg-gray-200 w-[80px] hover:bg-gray-300 py-1 px-4\"\n          >\n            Edit\n          </button>\n          <button\n            type=\"submit\"\n            className=\"w-[80px] bg-gray-700 text-white py-1 px-4\"\n          >\n            {showSpinner ? <Spinner /> : \"Save\"}\n          </button>\n        </div>\n      </form>\n      {isOpenModal && (\n        <Modal>\n          <PasswordForm setIsOpenModal={setIsOpenModal} />\n        </Modal>\n      )}\n    </div>\n  );\n}\n"],"names":["Modal","_ref","children","_jsx","className","PasswordForm","props","register","formState","errors","handleSubmit","useForm","UPDATE_PASSWORD","gql","_templateObject","_taggedTemplateLiteral","updatePassword","error","data","loading","useMutation","showSpinner","setShowSpinner","useState","_jsxs","onSubmit","variables","then","catch","err","finally","required","placeholder","currentPassword","message","newPassword","confirmPassword","onClick","setIsOpenModal","type","Spinner","Profile","GET_PROFILE","UPDATE_PROFILE","_templateObject2","updateProfile","uError","uLoading","useQuery","reset","useEffect","getProfile","isFormDisabled","setIsFormDisabled","isOpenModal","Error","email","firstName","lastName","address","dateOfBirth","disabled","style","width","prev"],"sourceRoot":""}